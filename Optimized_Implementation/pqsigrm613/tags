!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AES256_CTR_DRBG_Update	src/rng.c	/^AES256_CTR_DRBG_Update(unsigned char *provided_data,$/;"	f
AES256_CTR_DRBG_struct	src/rng.h	/^} AES256_CTR_DRBG_struct;$/;"	t	typeref:struct:__anon3
AES256_ECB	src/rng.c	/^AES256_ECB(unsigned char *key, unsigned char *ctr, unsigned char *buffer)$/;"	f
AES_XOF_struct	src/rng.h	/^} AES_XOF_struct;$/;"	t	typeref:struct:__anon2
AlgName	PQCgenKAT_sign.c	/^char    AlgName[] = "Enhanced_pqsigRM612";$/;"	v
AlgName	runtime.c	/^char    AlgName[] = "Enhanced_pqsigRM613";$/;"	v
CC	Makefile	/^CC = gcc$/;"	m
CFILES	Makefile	/^CFILES := $(shell find src -name '*.c' | sed -e 's\/\\.c\/\\.o\/')$/;"	m
CFLAGS	Makefile	/^CFLAGS = -I\/usr\/local\/include$/;"	m
CODE_K	src/parm.h	11;"	d
CODE_N	src/parm.h	12;"	d
CRYPTO_ALGNAME	src/api.h	12;"	d
CRYPTO_BYTES	src/api.h	10;"	d
CRYPTO_PUBLICKEYBYTES	src/api.h	7;"	d
CRYPTO_SECRETKEYBYTES	src/api.h	8;"	d
DBG_FLAGS	Makefile	/^DBG_FLAGS = -O2 -DNDEBUG$/;"	m
DBG_FLAGS	Makefile	/^DBG_FLAGS = -g -O0 -DDEBUG$/;"	m
DRBG_ctx	src/rng.c	/^AES256_CTR_DRBG_struct  DRBG_ctx;$/;"	v
ELEMBLOCK	src/matrix.h	10;"	d
ELEMBLOCKSIZE	src/matrix.h	11;"	d
ERROR_NO_FILE	src/parm.h	22;"	d
FindMarker	PQCgenKAT_sign.c	/^FindMarker(FILE *infile, const char *marker)$/;"	f
HASHSIZEBYTES	src/parm.h	17;"	d
INV_FAIL	src/matrix.h	14;"	d
INV_SUCCESS	src/matrix.h	13;"	d
KAT_CRYPTO_FAILURE	PQCgenKAT_sign.c	22;"	d	file:
KAT_DATA_ERROR	PQCgenKAT_sign.c	21;"	d	file:
KAT_FILE_OPEN_ERROR	PQCgenKAT_sign.c	20;"	d	file:
KAT_SUCCESS	PQCgenKAT_sign.c	19;"	d	file:
Key	src/rng.h	/^    unsigned char   Key[32];$/;"	m	struct:__anon3
LDFLAGS	Makefile	/^LDFLAGS =  -L\/usr\/local\/lib$/;"	m
LIBFLAGS	Makefile	/^LIBFLAGS = -lcrypto -lssl -lm$/;"	m
MATRIX_NULL	src/matrix.h	9;"	d
MAX_MARKER_LEN	PQCgenKAT_sign.c	17;"	d	file:
MAX_MARKER_LEN	runtime.c	17;"	d	file:
OBJS	Makefile	/^OBJS = ${CFILES}$/;"	m
PARM_P	src/parm.h	14;"	d
RM_M	src/parm.h	9;"	d
RM_R	src/parm.h	8;"	d
RNG_BAD_MAXLEN	src/rng.h	14;"	d
RNG_BAD_OUTBUF	src/rng.h	15;"	d
RNG_BAD_REQ_LEN	src/rng.h	16;"	d
RNG_SUCCESS	src/rng.h	13;"	d
RUN_CRYPTO_FAILURE	runtime.c	22;"	d	file:
RUN_DATA_ERROR	runtime.c	21;"	d	file:
RUN_FILE_OPEN_ERROR	runtime.c	20;"	d	file:
RUN_SUCCESS	runtime.c	19;"	d	file:
ReadHex	PQCgenKAT_sign.c	/^ReadHex(FILE *infile, unsigned char *A, int Length, char *str)$/;"	f
SIGN_FAILURE	src/parm.h	19;"	d
V	src/rng.h	/^    unsigned char   V[16];$/;"	m	struct:__anon3
VERIF_REJECT	src/parm.h	20;"	d
WEIGHT_PUB	src/parm.h	16;"	d
__MATRIX_H	src/matrix.h	2;"	d
__NEARESR_VECTOR	src/nearest_vector.h	2;"	d
__PARM_H	src/parm.h	6;"	d
__PQSIGRM_COMMON_H	src/common.h	5;"	d
__RM_H	src/rm.h	6;"	d
alloc_size	src/matrix.h	/^   uint32_t alloc_size;\/\/number of allocated bytes$/;"	m	struct:__anon1
api_h	src/api.h	5;"	d
buffer	src/rng.h	/^    unsigned char   buffer[16];$/;"	m	struct:__anon2
buffer_pos	src/rng.h	/^    int             buffer_pos;$/;"	m	struct:__anon2
col_permute	src/common.c	/^void col_permute(matrix* m, const int rf, const int rr, const int cf, $/;"	f
compare	src/common.c	/^int static compare(const void* first, const void* second){$/;"	f	file:
copy_columns	src/keypair.c	/^int copy_columns(matrix *dest, matrix *src, uint32_t *lead ){$/;"	f
copy_matrix	src/matrix.c	/^matrix* copy_matrix(matrix* dest, matrix* src){$/;"	f
cpucycles	runtime.c	/^long long cpucycles(void) {$/;"	f
crypto_sign	src/sign.c	/^crypto_sign(unsigned char *sm, unsigned long long *smlen,$/;"	f
crypto_sign_keypair	src/keypair.c	/^crypto_sign_keypair(unsigned char *pk, unsigned char *sk){$/;"	f
crypto_sign_open	src/open.c	/^crypto_sign_open(unsigned char *m, unsigned long long *mlen,$/;"	f
ctr	src/rng.h	/^    unsigned char   ctr[16];$/;"	m	struct:__anon2
delete_matrix	src/matrix.c	/^void delete_matrix(matrix* A)$/;"	f
dual	src/matrix.c	/^void dual(matrix* G, matrix* H_sys, uint32_t *lead, uint32_t *lead_diff){$/;"	f
elem	src/matrix.h	/^   unsigned char *elem;\/\/row index.$/;"	m	struct:__anon1
export_matrix	src/matrix.c	/^int export_matrix(unsigned char* dest, matrix* src_mtx){$/;"	f
export_pk	src/keypair.c	/^void export_pk(unsigned char *pk, matrix *H_pub){$/;"	f
export_sk	src/keypair.c	/^void export_sk(unsigned char *sk, matrix *Sinv, uint32_t *Q, $/;"	f
flip_element	src/matrix.h	17;"	d
fprintBstr	PQCgenKAT_sign.c	/^fprintBstr(FILE *fp, char *S, unsigned char *A, uint64_t L)$/;"	f
get_element	src/matrix.h	16;"	d
get_pivot	src/matrix.c	/^void get_pivot(matrix* mtx, uint32_t *lead, uint32_t *lead_diff){$/;"	f
hamming_weight	src/common.c	/^int hamming_weight(matrix* error){$/;"	f
handleErrors	src/rng.c	/^void handleErrors(void)$/;"	f
hash_message	src/common.c	/^unsigned char* hash_message(unsigned char *s, const unsigned char *m, $/;"	f
import_matrix	src/matrix.c	/^matrix* import_matrix(matrix* dest_mtx, const unsigned char* src){$/;"	f
import_pk	src/open.c	/^void import_pk(const unsigned char *pk, matrix *H_pub){$/;"	f
import_signed_msg	src/open.c	/^void import_signed_msg(matrix *errorMtx, unsigned long long *sign_i, const unsigned char *sm){$/;"	f
import_sk	src/sign.c	/^void import_sk(const unsigned char *sk, matrix *Sinv$/;"	f
init_decoding	src/nearest_vector.c	/^void init_decoding(int n){$/;"	f
init_zero	src/matrix.h	19;"	d
inverse	src/matrix.c	/^int inverse(matrix *mtx, matrix *mtxInv){$/;"	f
is_nonsingular	src/matrix.c	/^int is_nonsingular(matrix *mtx){$/;"	f
key	src/rng.h	/^    unsigned char   key[32];$/;"	m	struct:__anon2
length_remaining	src/rng.h	/^    unsigned long   length_remaining;$/;"	m	struct:__anon2
main	PQCgenKAT_sign.c	/^main()$/;"	f
main	runtime.c	/^main()$/;"	f
mat_mat_add	src/matrix.c	/^int mat_mat_add(matrix *m1, matrix *m2, matrix *res){$/;"	f
mat_mat_prod	src/matrix.c	/^void mat_mat_prod(matrix * mtx1, matrix * mtx2, matrix * prod) {$/;"	f
matrix	src/matrix.h	/^} matrix;$/;"	t	typeref:struct:__anon1
ncols	src/matrix.h	/^   uint32_t ncols;\/\/number of columns.$/;"	m	struct:__anon1
new_matrix	src/matrix.c	/^matrix* new_matrix (uint32_t nrows, uint32_t ncols)$/;"	f
nrows	src/matrix.h	/^   uint32_t nrows;\/\/number of rows.$/;"	m	struct:__anon1
partial_permutation_gen	src/common.c	/^void partial_permutation_gen(uint16_t* Q){$/;"	f
partial_replace	src/matrix.c	/^void partial_replace(matrix* dest, const int r1, const int c1,const int r2, const int c2, matrix* src, const int r3, const int c3){$/;"	f
permutation_gen	src/common.c	/^void permutation_gen(uint16_t *Q, int len){$/;"	f
random16	src/common.c	/^uint16_t random16(uint16_t n){$/;"	f
randombytes	src/rng.c	/^randombytes(unsigned char *x, unsigned long long xlen)$/;"	f
randombytes_init	src/rng.c	/^randombytes_init(unsigned char *entropy_input,$/;"	f
recursive_decoding_mod	src/nearest_vector.c	/^void recursive_decoding_mod(float* y, const  int r1, const int m1, $/;"	f
reseed_counter	src/rng.h	/^    int             reseed_counter;$/;"	m	struct:__anon3
rm_dim	src/rm.c	/^const uint16_t rm_dim[7][13]  $/;"	v
rm_gen	src/rm.c	/^matrix* rm_gen(int r, int m, uint16_t row_f, uint16_t row_r, uint16_t col_f, $/;"	f
rm_gen_mod	src/rm.c	/^matrix* rm_gen_mod(matrix* gen, uint16_t *part_perm1, uint16_t *part_perm2) {$/;"	f
rng_h	src/rng.h	9;"	d
row_addition_internal	src/matrix.c	/^void row_addition_internal(matrix* A, int dest_row_idx, int adding_row_idx){$/;"	f
row_interchange	src/matrix.c	/^void row_interchange(matrix* A, uint32_t row_idx1, uint32_t row_idx2){$/;"	f
rref	src/matrix.c	/^matrix* rref(matrix* A)$/;"	f
seedexpander	src/rng.c	/^seedexpander(AES_XOF_struct *ctx, unsigned char *x, unsigned long xlen)$/;"	f
seedexpander_init	src/rng.c	/^seedexpander_init(AES_XOF_struct *ctx,$/;"	f
set_element	src/matrix.h	18;"	d
swap16	src/common.c	/^void swap16(uint16_t *Q, const int i, const int j){$/;"	f
syndromeForMsg	src/sign.c	/^matrix* syndromeForMsg(matrix* scrambled_synd_mtx, matrix *Sinv, matrix *synd_mtx$/;"	f
temp	src/nearest_vector.c	/^float *temp; $/;"	v
transpose	src/matrix.c	/^matrix* transpose(matrix *dest, matrix *src){$/;"	f
vec_mat_prod	src/matrix.c	/^void vec_mat_prod(matrix *dest, matrix* m, matrix *vec){$/;"	f
wgt	src/sign.c	/^int wgt(float *yc, float *yr)$/;"	f
words_in_row	src/matrix.h	/^   uint32_t words_in_row;\/\/number of words in a row$/;"	m	struct:__anon1
y_depermute	src/nearest_vector.c	/^void y_depermute(float *y, const int f, const int r, uint16_t *Q){$/;"	f
y_init	src/sign.c	/^void y_init(float *yc, float *yr, matrix* syndrome, uint16_t *s_lead){$/;"	f
y_permute	src/nearest_vector.c	/^void y_permute(float *y, const int f, const int r, uint16_t *Q){$/;"	f
